const express = require('express');
const mysql = require('mysql2');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const router = express.Router();

const db = mysql.createConnection({ //replace with your own DB details
    host: 'localhost',
    user: 'user',
    password: 'password',
    database: 'zomato'
});

// SIGN UP route
router.post('/signup', (req, res) => {
    const { name, email, password } = req.body;

    bcrypt.hash(password, 10, (err, hash) => {
        if(err) {
            return res.status(500).json({
                error: err
            });
        } else {
            db.query('INSERT INTO users (name, email, password) VALUES (?, ?, ?)', [name, email, hash], function (error, results) {
                if(error) {
                    res.status(500).json({ error: error });
                } else {
                    res.status(201).json({ message: "User registered successfully" });
                }
            });
        }
    });
});

// LOGIN route
router.post('/login', (req, res) => {
    const { name, password } = req.body;

    db.query('SELECT * FROM users WHERE name = ?', [name], async function (err, result) {
        if(err) {
            res.status(500).json({ error: err });
        } else if(result.length < 1) {
            res.status(401).json({ message: "Auth failed" });
        } else {
            bcrypt.compare(password, result[0].password, (bErr, bResult) => {
                if(bErr) {
                    res.status(401).json({ message: 'Auth failed' });
                } else if(bResult) {
                    const token = jwt.sign({
                        name: result[0].name,
                        userId: result[0].id
                    },
                    'SECRETKEY', // Replace with your own secret
                    {
                        expiresIn: '1h'
                    }
                    );
                    res.status(200).json({
                        message: 'Auth successful',
                        token: token
                    });
                } else {
                    res.status(401).json({ message: "Auth failed" });
                }
            });
        }
    });
});

module.exports = router;
