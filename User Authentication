User Registration:
router.post('/register', async (req, res) => {
  const { fullName, email, password } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = await User.create({
      fullName,
      email,
      password: hashedPassword,
    });

    res.status(201).json({
      status: 'success',
      data: {
        id: newUser.id,
        fullName: newUser.fullName,
        email: newUser.email,
      },
    });
  } catch (err) {
    res.status(500).json({ status: 'error', message: err.message });
  }
});
User Login:
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ where: { email: email } });

    if (!user) {
      return res.status(404).json({ status: 'error', message: 'User not found' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return res.status(400).json({ status: 'error', message: 'Invalid password' });
    }

    const token = jwt.sign({ id: user.id }, 'SECRET_KEY', { expiresIn: '1h' });

    res.status(200).json({
      status: 'success',
      data: {
        id: user.id,
        fullName: user.fullName,
        email: user.email,
        token,
      },
    });

  } catch (err) {
    res.status(500).json({ status: 'error', message: err.message });
  }
});
